name: CI Pipelines

on:
  pull_request:
    branches:
      - "*"
    paths-ignore:
      - '*.md'
  push:
    branches:
      - main

  release:
    types: [published]

## Variable list
# secret.DOCKERHUB_USERNAME
# secret.DOCKERHUB_TOKEN

env:
  DOCKERHUB_REPO: fhivemind
  RELEASE_NAME: plant-operator

jobs:
  check:
    name: Sanity check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Go
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      ### CHECK STEPS

      - name: Check - Standards
        run: make fmt vet

      - name: Check - Security
        uses: securego/gosec@v2.15.0
        with:
          args: -exclude=G109,G601,G104,G204,G304,G306,G307 -tests=false ./...

# TODO: Linting disabled for now
#      - name: Check linting
#        uses: golangci/golangci-lint-action@v3.4.0
#        with:
#          version: v1.51.1

  test:
    name: Test suite
    runs-on: ubuntu-latest
    needs:
      - check
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Go
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      ### TEST STEPS

      - name: Test - Unit and integration
        run: make test

      ### POST STEPS

      - name: Post - Load coverage
        run: |
          export GOPATH="$HOME/go/"
          export PATH=$PATH:$GOPATH/bin
          go install github.com/axw/gocov/gocov@v1.1.0
          go install github.com/AlekSi/gocov-xml@v1.1.0
          gocov convert cover.out | gocov-xml > coverage.xml

      - name: Post - Generate summary
        if: github.event_name == 'pull_request'
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          format: markdown
          output: both

      - name: Post - Add to PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md

  build-release:
    name: Build & Release
    runs-on: ubuntu-latest
    needs:
      - check
      - test
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure Go
        id: go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          check-latest: true

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      ### BUILD STEPS

      - name: Build - Local image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.RELEASE_NAME }}:latest

      ### RELEASE STEPS

      - name: Release - Login to Docker
        uses: docker/login-action@v2
        if: github.event_name == 'release' && github.event.action == 'published'
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Release - Push public image
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}/${{ env.RELEASE_NAME }}:${{ github.event.release.name }}

      - name: Release - Generate artifacts
        if: github.event_name == 'release' && github.event.action == 'published'
        run: |
          make release \
            IMG="${{ env.DOCKERHUB_REPO }}/${{ env.RELEASE_NAME }}:${{ github.event.release.name }}" \
            RELEASE_NAME="${{ env.RELEASE_NAME }}.${{ github.event.release.name }}.yaml"

      - name: Release - Upload artifacts
        if: github.event_name == 'release' && github.event.action == 'published'
        uses: jasonetco/upload-to-release@v0.1.1
        with:
          args: release/${{ env.RELEASE_NAME }}.${{ github.event.release.name }}.yaml text/plain
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
